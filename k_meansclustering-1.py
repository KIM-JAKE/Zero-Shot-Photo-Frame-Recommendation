# -*- coding: utf-8 -*-
"""K-meansClustering

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d0nqFxQBeKGFKiCHDwzzNV9tNSOLXZX9
"""

from google.colab import drive
drive.mount('K-meansClustering')

import matplotlib.pyplot as plt
import cv2
import numpy as np

"""1. 이미지를 불러오고 이미지에 대해 알아보자"""

image = plt.imread('/content/K-meansClustering/MyDrive/island.jpg')

plt.imshow(image)
plt.show()
print(image.shape)

vectorized = image.reshape((-1,3))
print(vectorized.shape)
plt.imshow(vectorized)
plt.show()

vectorized = np.float32(vectorized)

print((vectorized)) # 959*1280

criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 1000, 0.01)

K = 3
attempts = 10
ret,label,center = cv2.kmeans(vectorized,K,
                                None,
                                criteria,
                                attempts,
                                cv2.KMEANS_PP_CENTERS)

print('ret : ', ret)

print('length of label : ',len(label))

print('location of center : ', center)

print('length of center : ', len(center))

A = vectorized[label.ravel()==0]
B = vectorized[label.ravel()==1]
C = vectorized[label.ravel()==2]

plt.scatter(A[:,0],A[:,1])
plt.scatter(B[:,0],B[:,1],c = 'r')
plt.scatter(C[:,0],C[:,1],c = 'g')

plt.scatter(center[:,0],center[:,1],s = 80,c = 'y', marker = 's')
plt.show()

A

label.flatten()

center[1]
center[2]
center[0]

center = np.uint8(center)
res = center[label.flatten()]
result_image = res.reshape((image.shape))
figure_size = 15
plt.figure(figsize=(figure_size,figure_size))
plt.subplot(1,2,1),plt.imshow(image)
plt.title('Original Image'), plt.xticks([]), plt.yticks([])
plt.subplot(1,2,2),plt.imshow(result_image)
plt.title('Segmented Image when K = %i' % K), plt.xticks([]), plt.yticks([])
plt.show()

"""이제 함수로 만들어 볼까요?"""

def Kmeanclustering(path,max_iter=1000,eps=0.01,k=3,attempts=10) :
  image = plt.imread(path)
  vectorized = image.reshape((-1,3))
  vectorized = np.float32(vectorized)
  criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER,max_iter, eps)
  ret,label,center = cv2.kmeans(vectorized,k,
                                None,
                                criteria,
                                attempts,
                                cv2.KMEANS_PP_CENTERS)
  center = np.uint8(center)
  res = center[label.flatten()]
  result_image = res.reshape((image.shape))
  return result_image

image = plt.imread(('/content/K-meansClustering/MyDrive/house.jpg'))

figure_size = 15
  plt.figure(figsize=(figure_size,figure_size))
  plt.subplot(2,2,1),plt.imshow(image)
  plt.title('Original Image'), plt.xticks([]), plt.yticks([])
  plt.subplot(2,2,2),plt.imshow(Kmeanclustering('/content/K-meansClustering/MyDrive/house.jpg',k=3))
  plt.title('Segmented Image when K = %i' % 3), plt.xticks([]), plt.yticks([])
  plt.subplot(2,2,3),plt.imshow(Kmeanclustering('/content/K-meansClustering/MyDrive/house.jpg',k=7))
  plt.title('Segmented Image when K = %i' % 7), plt.xticks([]), plt.yticks([])
  plt.subplot(2,2,4),plt.imshow(Kmeanclustering('/content/K-meansClustering/MyDrive/house.jpg',k=15))
  plt.title('Segmented Image when K = %i' % 15), plt.xticks([]), plt.yticks([])
  plt.subplots_adjust(wspace=0, hspace=0)
  plt.show()

Kmeanclustering('/content/K-means_and_PCA/MyDrive/for_practice.jpg',k=7)

path = '/content/K-means_and_PCA/MyDrive/cars.jpg'
for iter in range(10,11):
  Kmeanclustering(path,k=iter)

