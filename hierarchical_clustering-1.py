# -*- coding: utf-8 -*-
"""hierarchical_clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QfzhaaQ9nDdDGU93cUoKmC9X6_TTPpZJ
"""

from google.colab import drive
drive.mount('hierarchical_clustering')

import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import AgglomerativeClustering
from scipy.cluster.hierarchy import dendrogram
from sklearn.preprocessing import StandardScaler
from PIL import Image

image = plt.imread('/content/mountain.jpg')

plt.imshow(image)
plt.show()
print(image.shape)

# 이미지 로드 및 전처리
image = Image.open('/content/mountain.jpg')
image = image.resize((100, 100))  # 크기 조정
pixels = np.array(image)
X = pixels.reshape(-1, 3)  # 픽셀을 RGB 특징 벡터로 변환

# 계층적 군집화
cluster = AgglomerativeClustering(n_clusters=None, distance_threshold=2500, linkage='ward')
cluster.fit(X)

# 덴드로그램 생성 (선택적)
def plot_dendrogram(model, **kwargs):
    # 덴드로그램을 그리기 위한 연결 매트릭스 생성
    counts = np.zeros(model.children_.shape[0])
    n_samples = len(model.labels_)
    for i, merge in enumerate(model.children_):
        current_count = 0
        for child_idx in merge:
            if child_idx < n_samples:
                current_count += 1  # 리프 노드
            else:
                current_count += counts[child_idx - n_samples]
        counts[i] = current_count

    linkage_matrix = np.column_stack([model.children_, model.distances_,
                                      counts]).astype(float)

    # 덴드로그램 플롯
    dendrogram(linkage_matrix, **kwargs)

plt.title('Hierarchical Clustering Dendrogram')
plot_dendrogram(cluster, truncate_mode='level', p=3)
plt.show()

from PIL import Image
import numpy as np

# 군집 결과를 바탕으로 이미지 세분화
labels = cluster.labels_

# 군집 결과를 바탕으로 각 군집의 평균 색상 계산
unique_labels = np.unique(labels)
average_colors = {label: np.mean(X[labels == label], axis=0) for label in unique_labels}

# 세분화된 이미지 생성
segmented_img = np.zeros_like(X)
for label, color in average_colors.items():
    segmented_img[labels == label] = color

# 원본 이미지의 형태로 재구성
segmented_img = segmented_img.reshape(pixels.shape)
segmented_img = segmented_img.astype(np.uint8)

# PIL 이미지 객체로 변환
pil_img = Image.fromarray(segmented_img)

# 새 크기로 이미지 변경
resized_img = pil_img.resize((256, 256), Image.ANTIALIAS)

figure_size = 10
plt.figure(figsize=(figure_size,figure_size))
plt.subplot(1,2,1),plt.imshow(image)
plt.title('Original Image'), plt.xticks([]), plt.yticks([])
plt.subplot(1,2,2),plt.imshow(resized_img)
plt.title('Hierarchical Clustering Image'), plt.xticks([]), plt.yticks([])
plt.show()

segmented_img.shape

